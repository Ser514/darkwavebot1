import os
import logging
from aiohttp import web
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# üîê ENV-–∑–º—ñ–Ω–Ω—ñ
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")  # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: @darkwave_love
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "supersecret")
BASE_WEBHOOK_URL = os.getenv("BASE_WEBHOOK_URL")  # https://your-app.onrender.com
WEBHOOK_PATH = "/webhook"
PORT = int(os.getenv("PORT", 10000))

# ‚öôÔ∏è –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# üìã –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏
class Form(StatesGroup):
    name = State()
    age = State()
    city = State()
    orientation = State()
    looking_for = State()
    vibe = State()
    height = State()
    contact = State()
    photo = State()

# üöÄ /start
@dp.message(F.text == "/start")
async def start_handler(message: Message, state: FSMContext):
    await message.answer("üåë –ü—Ä–∏–≤—ñ—Ç —É Darkwave.\n–ì–æ—Ç–æ–≤–∏–π –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É? –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.")
    await state.set_state(Form.name)

@dp.message(Form.name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Form.age)
    await message.answer("–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")

@dp.message(Form.age)
async def get_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await state.set_state(Form.city)
    await message.answer("–ó–≤—ñ–¥–∫–∏ —Ç–∏?")

@dp.message(Form.city)
async def get_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await state.set_state(Form.orientation)
    await message.answer("–Ø–∫–∞ —Ç–≤–æ—è –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è? (–ì–µ—Ç–µ—Ä–æ / –ë—ñ / –Ü–Ω—à–µ)")

@dp.message(Form.orientation)
async def get_orientation(message: Message, state: FSMContext):
    await state.update_data(orientation=message.text)
    await state.set_state(Form.looking_for)
    await message.answer("–ö–æ–≥–æ —à—É–∫–∞—î—à?")

@dp.message(Form.looking_for)
async def get_looking_for(message: Message, state: FSMContext):
    await state.update_data(looking_for=message.text)
    await state.set_state(Form.vibe)
    await message.answer("–û–ø–∏—à–∏ —Å–≤—ñ–π –≤–∞–π–±, —Å—Ç–∏–ª—å –∞–±–æ –º—É–∑–∏–∫—É —è–∫—É —Å–ª—É—Ö–∞—î—à:")

@dp.message(Form.vibe)
async def get_vibe(message: Message, state: FSMContext):
    await state.update_data(vibe=message.text)
    await state.set_state(Form.height)
    await message.answer("–Ø–∫–∏–π —Ç–≤—ñ–π –∑—Ä—ñ—Å—Ç?")

@dp.message(Form.height)
async def get_height(message: Message, state: FSMContext):
    await state.update_data(height=message.text)
    await state.set_state(Form.contact)
    await message.answer("–í–∫–∞–∂–∏ —Å–≤—ñ–π Telegram @–Ω—ñ–∫:")

@dp.message(Form.contact)
async def get_contact(message: Message, state: FSMContext):
    await state.update_data(contact=message.text)
    await state.set_state(Form.photo)
    await message.answer("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ (–æ–¥–Ω–µ):")

@dp.message(Form.photo, F.photo)
async def get_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    caption = f"""
üñ§ –Ü–º‚Äô—è: {data['name']}
üéÇ –í—ñ–∫: {data['age']}
üìç –ú—ñ—Å—Ç–æ: {data['city']}
üè≥Ô∏è –û—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è: {data['orientation']}
üí¨ –®—É–∫–∞—î: {data['looking_for']}
üéß –í–∞–π–±: {data['vibe']}
üìè –ó—Ä—ñ—Å—Ç: {data['height']}
üîó Telegram: {data['contact']}
"""
    await bot.send_photo(chat_id=CHANNEL_ID, photo=message.photo[-1].file_id, caption=caption)
    await message.answer("‚úÖ –¢–≤–æ—é –∞–Ω–∫–µ—Ç—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–æ –∫–∞–Ω–∞–ª—É. –î—è–∫—É—î–º–æ!")
    await state.clear()

# üîó Webhook —Å—Ç–∞—Ä—Ç
async def on_startup(app):
    webhook_url = f"{BASE_WEBHOOK_URL}{WEBHOOK_PATH}"
    await bot.set_webhook(webhook_url, secret_token=WEBHOOK_SECRET)
    logger.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}")

# üßπ Webhook —Å—Ç–æ–ø
async def on_shutdown(app):
    await bot.delete_webhook()
    logger.info("Webhook –≤–∏–¥–∞–ª–µ–Ω–æ")

# üîÅ –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ Telegram
async def handle_webhook(request):
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return web.Response(status=403)
    update = await request.json()
    await dp.feed_raw_update(bot, update)
    return web.Response()

# üß© –ó–∞–ø—É—Å–∫ aiohttp —Å–µ—Ä–≤–µ—Ä–∞
app = web.Application()
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)
app.router.add_post(WEBHOOK_PATH, handle_webhook)

if __name__ == "__main__":
    web.run_app(app, port=PORT)
