import os
import logging
from aiohttp import web
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, InputMediaVideo, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# üîê ENV-–∑–º—ñ–Ω–Ω—ñ
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "supersecret")
BASE_WEBHOOK_URL = os.getenv("BASE_WEBHOOK_URL")
WEBHOOK_PATH = "/webhook"
PORT = int(os.getenv("PORT", 10000))

# ‚öôÔ∏è –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# üìã –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏
class Form(StatesGroup):
    name = State()
    age = State()
    city = State()
    orientation = State()
    looking_for = State()
    vibe = State()
    height = State()
    contact = State()
    media = State()

user_profiles = {}

def profile_caption(data):
    return f"""
üñ§ –Ü–º‚Äô—è: {data.get('name')}
üéÇ –í—ñ–∫: {data.get('age')}
üìç –ú—ñ—Å—Ç–æ: {data.get('city')}
üè≥Ô∏è –û—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è: {data.get('orientation')}
üí¨ –®—É–∫–∞—î: {data.get('looking_for')}
üéß –í–∞–π–±: {data.get('vibe')}
üìè –ó—Ä—ñ—Å—Ç: {data.get('height')}
üîó Telegram: {data.get('contact')}
"""

@dp.message(F.text == "/start")
async def start_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üåë –ü—Ä–∏–≤—ñ—Ç —É Darkwave.\n—è–∫ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è?")
    await state.set_state(Form.name)

@dp.message(Form.name, F.text)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Form.age)
    await message.answer("–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")

@dp.message(Form.age, F.text)
async def get_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await state.set_state(Form.city)
    await message.answer("–ó–≤—ñ–¥–∫–∏ —Ç–∏?")

@dp.message(Form.city, F.text)
async def get_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await state.set_state(Form.orientation)
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–ì–µ—Ç–µ—Ä–æ"), KeyboardButton(text="–ë—ñ")],
        [KeyboardButton(text="–Ü–Ω—à–µ")]
    ], resize_keyboard=True)
    await message.answer("–Ø–∫–∞ —Ç–≤–æ—è –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è?", reply_markup=keyboard)

@dp.message(Form.orientation, F.text)
async def get_orientation(message: Message, state: FSMContext):
    await state.update_data(orientation=message.text)
    await state.set_state(Form.looking_for)
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–î—ñ–≤—á–∏–Ω—É"), KeyboardButton(text="–•–ª–æ–ø—Ü—è")],
        [KeyboardButton(text="–î—Ä—É–≥–∞"), KeyboardButton(text="–ü–æ–¥—Ä—É–≥—É")],
        [KeyboardButton(text="FWB"), KeyboardButton(text="ONS")]
    ], resize_keyboard=True)
    await message.answer("–ö–æ–≥–æ —à—É–∫–∞—î—à?", reply_markup=keyboard)

@dp.message(Form.looking_for, F.text)
async def get_looking_for(message: Message, state: FSMContext):
    await state.update_data(looking_for=message.text)
    await state.set_state(Form.vibe)
    await message.answer("–û–ø–∏—à–∏ —Å–≤—ñ–π –≤–∞–π–±, —Å—Ç–∏–ª—å –∞–±–æ –º—É–∑–∏–∫—É —è–∫—É —Å–ª—É—Ö–∞—î—à:", reply_markup=ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True))

@dp.message(Form.vibe, F.text)
async def get_vibe(message: Message, state: FSMContext):
    await state.update_data(vibe=message.text)
    await state.set_state(Form.height)
    await message.answer("–Ø–∫–∏–π —Ç–≤—ñ–π –∑—Ä—ñ—Å—Ç?")

@dp.message(Form.height, F.text)
async def get_height(message: Message, state: FSMContext):
    await state.update_data(height=message.text)
    await state.set_state(Form.contact)
    await message.answer("–í–∫–∞–∂–∏ —Å–≤—ñ–π Telegram @–Ω—ñ–∫:")

@dp.message(Form.contact, F.text)
async def get_contact(message: Message, state: FSMContext):
    await state.update_data(contact=message.text)
    await state.set_state(Form.media)
    await message.answer("–ù–∞–¥—ñ—à–ª–∏ –¥–æ 3 —Ñ–æ—Ç–æ –∞–±–æ 1 –≤—ñ–¥–µ–æ —ñ –¥–æ 2 —Ñ–æ—Ç–æ:")

@dp.message(Form.media)
async def get_media(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    media = user_profiles.get(user_id, {"media": []})["media"]

    if message.photo:
        media.append(InputMediaPhoto(media=message.photo[-1].file_id))
    elif message.video:
        media.append(InputMediaVideo(media=message.video.file_id))
    else:
        await message.answer("–ù–∞–¥—ñ—à–ª–∏ —Ç—ñ–ª—å–∫–∏ —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ")
        return

    if len(media) >= 3:
        caption = profile_caption(data)
        try:
            media[0].caption = caption
            await bot.send_media_group(chat_id=CHANNEL_ID, media=media)
            await message.answer("‚úÖ –¢–≤–æ—é –∞–Ω–∫–µ—Ç—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–æ –∫–∞–Ω–∞–ª—É. –î—è–∫—É—î–º–æ!")
        except Exception as e:
            logging.exception("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∞–Ω–∫–µ—Ç–∏:")
            await message.answer("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∞–Ω–∫–µ—Ç–∏. –ó–≤'—è–∂–∏—Å—è –∑ –∞–¥–º—ñ–Ω–æ–º.")
        await state.clear()
        user_profiles.pop(user_id, None)
    else:
        user_profiles[user_id] = {"media": media}
        await message.answer(f"–ú–æ–∂–Ω–∞ —â–µ {3 - len(media)} —Ñ–∞–π–ª(–∏).")

# üîÅ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –±—É–¥—å-—è–∫–æ–º—É —Å—Ç–∞–Ω—ñ
@dp.message()
async def fallback(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await message.answer("‚ö†Ô∏è –û—á—ñ–∫—É—é —ñ–Ω—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –Ø–∫—â–æ —Ö–æ—á–µ—à –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É ‚Äî –Ω–∞–ø–∏—à–∏ /start")

# üîó Webhook —Å—Ç–∞—Ä—Ç
async def on_startup(app):
    webhook_url = f"{BASE_WEBHOOK_URL}{WEBHOOK_PATH}"
    await bot.set_webhook(webhook_url, secret_token=WEBHOOK_SECRET)
    logger.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}")

# üßπ Webhook —Å—Ç–æ–ø
async def on_shutdown(app):
    await bot.delete_webhook()
    logger.info("Webhook –≤–∏–¥–∞–ª–µ–Ω–æ")

# üîÅ –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ Telegram
async def handle_webhook(request):
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return web.Response(status=403)
    update = await request.json()
    logging.info(f"üí¨ –û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {update}")
    await dp.feed_raw_update(bot, update)
    return web.Response()

# üß© –ó–∞–ø—É—Å–∫ aiohttp —Å–µ—Ä–≤–µ—Ä–∞
app = web.Application()
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)
app.router.add_post(WEBHOOK_PATH, handle_webhook)

if __name__ == "__main__":
    web.run_app(app, port=PORT)
