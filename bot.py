import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramConflictError
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# üîß –ö–æ–Ω—Ñ—ñ–≥
BOT_TOKEN = "7735699455:AAHG1QV9B-h6IwCCvHYmw0nlqUy0PcwBZSw"
CHANNEL_ID = "@darkwave_love"

# ‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è
if not BOT_TOKEN or not CHANNEL_ID:
    raise ValueError("‚ùå BOT_TOKEN –∞–±–æ CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω—ñ")

# üîî –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# üìã –°—Ç–∞–Ω –∞–Ω–∫–µ—Ç–∏
class Form(StatesGroup):
    name = State()
    age = State()
    city = State()
    orientation = State()
    looking_for = State()
    vibe = State()
    height = State()
    contact = State()
    photo = State()

# üìç –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(F.text == "/start")
async def start_handler(message: Message, state: FSMContext):
    await message.answer("üåë –ü—Ä–∏–≤—ñ—Ç —É Darkwave.\n–ì–æ—Ç–æ–≤–∏–π –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É? –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.")
    await state.set_state(Form.name)

@router.message(Form.name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Form.age)
    await message.answer("–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")

@router.message(Form.age)
async def get_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await state.set_state(Form.city)
    await message.answer("–ó–≤—ñ–¥–∫–∏ —Ç–∏?")

@router.message(Form.city)
async def get_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await state.set_state(Form.orientation)
    await message.answer("–Ø–∫–∞ —Ç–≤–æ—è –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è? (–ì–µ—Ç–µ—Ä–æ / –ë—ñ / –Ü–Ω—à–µ)")

@router.message(Form.orientation)
async def get_orientation(message: Message, state: FSMContext):
    await state.update_data(orientation=message.text)
    await state.set_state(Form.looking_for)
    await message.answer("–ö–æ–≥–æ —à—É–∫–∞—î—à?")

@router.message(Form.looking_for)
async def get_looking_for(message: Message, state: FSMContext):
    await state.update_data(looking_for=message.text)
    await state.set_state(Form.vibe)
    await message.answer("–û–ø–∏—à–∏ —Å–≤—ñ–π –≤–∞–π–±, —Å—Ç–∏–ª—å –∞–±–æ –º—É–∑–∏–∫—É —è–∫—É —Å–ª—É—Ö–∞—î—à:")

@router.message(Form.vibe)
async def get_vibe(message: Message, state: FSMContext):
    await state.update_data(vibe=message.text)
    await state.set_state(Form.height)
    await message.answer("–Ø–∫–∏–π —Ç–≤—ñ–π –∑—Ä—ñ—Å—Ç?")

@router.message(Form.height)
async def get_height(message: Message, state: FSMContext):
    await state.update_data(height=message.text)
    await state.set_state(Form.contact)
    await message.answer("–í–∫–∞–∂–∏ —Å–≤—ñ–π Telegram @–Ω—ñ–∫:")

@router.message(Form.contact)
async def get_contact(message: Message, state: FSMContext):
    await state.update_data(contact=message.text)
    await state.set_state(Form.photo)
    await message.answer("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ (–æ–¥–Ω–µ):")

@router.message(Form.photo, F.photo)
async def get_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    caption = f"""
üñ§ –Ü–º‚Äô—è: {data['name']}
üìç –ú—ñ—Å—Ç–æ: {data['city']}
üéß –í–∞–π–±: {data['vibe']}
üí¨ –®—É–∫–∞—î: {data['looking_for']}
üìè –ó—Ä—ñ—Å—Ç: {data['height']}
üîó Telegram: {data['contact']}
"""
    await bot.send_photo(chat_id=CHANNEL_ID, photo=message.photo[-1].file_id, caption=caption)
    await message.answer("‚úÖ –¢–≤–æ—é –∞–Ω–∫–µ—Ç—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–æ –∫–∞–Ω–∞–ª—É. –î—è–∫—É—î–º–æ!")
    await state.clear()

@router.message(Form.photo)
async def warn_photo(message: Message):
    await message.answer("üì∏ –ù–∞–¥—ñ—à–ª–∏ —Å–∞–º–µ —Ñ–æ—Ç–æ, –±—É–¥—å –ª–∞—Å–∫–∞.")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
async def main():
    try:
        logger.info("‚è≥ –í–∏–¥–∞–ª—è—é –∞–∫—Ç–∏–≤–Ω–∏–π webhook (—è–∫—â–æ —î)...")
        await bot.delete_webhook(drop_pending_updates=True)

        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é polling...")
        await dp.start_polling(bot)

    except TelegramConflictError as e:
        logger.error(f"‚ö†Ô∏è TelegramConflictError: {e}")
        raise SystemExit("üî¥ –ë–æ—Ç —É–∂–µ –ø—Ä–∞—Ü—é—î –¥–µ—Å—å —ñ—â–µ. –ó–∞–≤–µ—Ä—à—É—é...")

    except Exception as e:
        logger.exception("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É")
        raise e

if __name__ == "__main__":
    asyncio.run(main())
