# coding=utf-8
import os
import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    InputMediaPhoto, InputMediaVideo
)
from aiogram.enums import ParseMode
from aiogram.client.session.bot import DefaultBotProperties
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiohttp import web

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID", "@your_channel_id")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "supersecret")
BASE_WEBHOOK_URL = os.getenv("BASE_WEBHOOK_URL")
WEBHOOK_PATH = "/webhook"
PORT = int(os.getenv("PORT", 10000))

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class Form(StatesGroup):
    name = State()
    age = State()
    city = State()
    orientation = State()
    looking_for = State()
    vibe = State()
    height = State()
    contact = State()
    photo = State()

MAX_PHOTOS = 3
user_media_store = {}

@dp.message(F.text == "/start")
async def start_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üåë –ü—Ä–∏–≤—ñ—Ç —É Darkwave. –Ø–∫ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è?")
    await state.set_state(Form.name)

@dp.message(Form.name, F.text)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Form.age)
    await message.answer("–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")

@dp.message(Form.age, F.text)
async def get_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await state.set_state(Form.city)
    await message.answer("–ó–≤—ñ–¥–∫–∏ —Ç–∏?")

@dp.message(Form.city, F.text)
async def get_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ì–µ—Ç–µ—Ä–æ"), KeyboardButton(text="–ë—ñ")],
            [KeyboardButton(text="–Ü–Ω—à–µ")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await state.set_state(Form.orientation)
    await message.answer("–Ø–∫–∞ —Ç–≤–æ—è –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è?", reply_markup=keyboard)

@dp.message(Form.orientation, F.text)
async def get_orientation(message: Message, state: FSMContext):
    await state.update_data(orientation=message.text)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î—ñ–≤—á–∏–Ω—É"), KeyboardButton(text="–•–ª–æ–ø—Ü—è")],
            [KeyboardButton(text="–î—Ä—É–≥–∞"), KeyboardButton(text="–ü–æ–¥—Ä—É–≥—É")],
            [KeyboardButton(text="FWB"), KeyboardButton(text="ONS")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await state.set_state(Form.looking_for)
    await message.answer("–ö–æ–≥–æ —à—É–∫–∞—î—à?", reply_markup=keyboard)

@dp.message(Form.looking_for, F.text)
async def get_looking_for(message: Message, state: FSMContext):
    await state.update_data(looking_for=message.text)
    await state.set_state(Form.vibe)
    await message.answer("–û–ø–∏—à–∏ —Å–≤—ñ–π –≤–∞–π–± –∞–±–æ –º—É–∑–∏–∫—É —è–∫—É —Å–ª—É—Ö–∞—î—à:")

@dp.message(Form.vibe, F.text)
async def get_vibe(message: Message, state: FSMContext):
    await state.update_data(vibe=message.text)
    await state.set_state(Form.height)
    await message.answer("–Ø–∫–∏–π —Ç–≤—ñ–π –∑—Ä—ñ—Å—Ç?")

@dp.message(Form.height, F.text)
async def get_height(message: Message, state: FSMContext):
    await state.update_data(height=message.text)
    await state.set_state(Form.contact)
    await message.answer("–í–∫–∞–∂–∏ —Å–≤—ñ–π Telegram @–Ω—ñ–∫:")

@dp.message(Form.contact, F.text)
async def get_contact(message: Message, state: FSMContext):
    await state.update_data(contact=message.text)
    await state.set_state(Form.photo)
    await message.answer("–ù–∞–¥—ñ—à–ª–∏ –¥–æ 3 —Ñ–æ—Ç–æ –∞–±–æ 1 –≤—ñ–¥–µ–æ + 2 —Ñ–æ—Ç–æ. –ù–∞–ø–∏—à–∏ /done –∫–æ–ª–∏ –∑–∞–≤–µ—Ä—à–∏—à.")

@dp.message(Form.photo, F.photo | F.video)
async def collect_media(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in user_media_store:
        user_media_store[user_id] = []

    media_list = user_media_store[user_id]

    if message.video:
        if any(isinstance(m, InputMediaVideo) for m in media_list):
            await message.answer("üé• –í–∂–µ —î –≤—ñ–¥–µ–æ. –ú–æ–∂–Ω–∞ –ª–∏—à–µ –æ–¥–Ω–µ.")
            return
        media_list.append(InputMediaVideo(media=message.video.file_id))
    elif message.photo:
        photo_count = sum(isinstance(m, InputMediaPhoto) for m in media_list)
        if photo_count >= MAX_PHOTOS:
            await message.answer("üì∏ –ú–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ.")
            return
        media_list.append(InputMediaPhoto(media=message.photo[-1].file_id))
    await message.answer("‚úÖ –î–æ–¥–∞–Ω–æ. –©–µ —â–æ—Å—å? /done –∫–æ–ª–∏ –≤—Å–µ.")

@dp.message(Form.photo, F.text == "/done")
async def finish_media_collection(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    media = user_media_store.get(user_id, [])

    if not media:
        await message.answer("‚ö†Ô∏è –¢–∏ –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–≤ –∂–æ–¥–Ω–æ–≥–æ –º–µ–¥—ñ–∞.")
        return

    caption = (
        f"üñ§ –Ü–º‚Äô—è: {data.get('name')}\n"
        f"üéÇ –í—ñ–∫: {data.get('age')}\n"
        f"üìç –ú—ñ—Å—Ç–æ: {data.get('city')}\n"
        f"üè≥Ô∏è –û—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è: {data.get('orientation')}\n"
        f"üí¨ –®—É–∫–∞—î: {data.get('looking_for')}\n"
        f"üéß –í–∞–π–±: {data.get('vibe')}\n"
        f"üìè –ó—Ä—ñ—Å—Ç: {data.get('height')}\n"
        f"üîó Telegram: {data.get('contact')}"
    )

    try:
        media[0].caption = caption
        media[0].parse_mode = ParseMode.HTML
        await bot.send_media_group(chat_id=CHANNEL_ID, media=media)
        await message.answer("‚úÖ –ê–Ω–∫–µ—Ç—É –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")
        await show_profiles(message)
    except Exception as e:
        logger.exception("‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è:")
        await message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.")
    finally:
        user_media_store.pop(user_id, None)
        await state.clear()

def profile_interaction_keyboard(user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ù§Ô∏è –õ–∞–π–∫", callback_data=f"like_{user_id}"),
            InlineKeyboardButton(text="üëé –î–∏–∑–ª–∞–π–∫", callback_data=f"dislike_{user_id}")
        ],
        [
            InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏", callback_data=f"msg_{user_id}"),
            InlineKeyboardButton(text="üìπ –ö—Ä—É–∂–æ–∫", callback_data=f"circle_{user_id}")
        ]
    ])

async def show_profiles(message: Message):
    # –¢–∏–º—á–∞—Å–æ–≤—ñ —Ñ–µ–π–∫–æ–≤—ñ –∞–Ω–∫–µ—Ç–∏ ‚Äî –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–ø—Ä–∞–≤–∂–Ω—ñ —ñ–∑ –±–∞–∑–∏!
    fake_profiles = [
        {"id": 1001, "name": "–ê–ª—ñ—Å–∞", "age": 23, "city": "–ö–∏—ó–≤", "photo": "AgACAgQAAxkBA..."},
        {"id": 1002, "name": "–ú–∞–∫—Å", "age": 26, "city": "–õ—å–≤—ñ–≤", "photo": "AgACAgQAAxkBA..."}
    ]
    for profile in fake_profiles:
        caption = f"üñ§ {profile['name']}, {profile['age']} —Ä–æ–∫—ñ–≤\nüìç {profile['city']}"
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=profile["photo"],
            caption=caption,
            reply_markup=profile_interaction_keyboard(profile["id"])
        )

@dp.message(F.text == "/me")
async def my_profile(message: Message, state: FSMContext):
    data = await state.get_data()
    if not data:
        await message.answer("üì≠ –£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞ –∞–Ω–∫–µ—Ç–∏. –ù–∞–ø–∏—à–∏ /start")
        return
    text = (
        f"üñ§ –Ü–º‚Äô—è: {data.get('name')}\n"
        f"üéÇ –í—ñ–∫: {data.get('age')}\n"
        f"üìç –ú—ñ—Å—Ç–æ: {data.get('city')}\n"
        f"–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ ‚Äî –Ω–∞–ø–∏—à–∏ /start"
    )
    await message.answer(text)

@dp.message()
async def fallback(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await message.answer("‚ö†Ô∏è –û—á—ñ–∫—É—é —ñ–Ω—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –ù–∞–ø–∏—à–∏ /start —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ.")

async def on_startup(app):
    webhook_url = f"{BASE_WEBHOOK_URL}{WEBHOOK_PATH}"
    await bot.set_webhook(webhook_url, secret_token=WEBHOOK_SECRET)
    logger.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}")

async def on_shutdown(app):
    await bot.delete_webhook()
    logger.info("Webhook –≤–∏–¥–∞–ª–µ–Ω–æ")

async def handle_webhook(request):
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return web.Response(status=403)
    update = await request.json()
    await dp.feed_raw_update(bot, update)
    return web.Response()

app = web.Application()
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)
app.router.add_post(WEBHOOK_PATH, handle_webhook)

if __name__ == "__main__":
    web.run_app(app, port=PORT)
