
import os
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")  # –ø—Ä–∏–∫–ª–∞–¥: '@darkwave_channel'

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

class Form(StatesGroup):
    name = State()
    age = State()
    city = State()
    orientation = State()
    looking_for = State()
    vibe = State()
    height = State()
    contact = State()
    photo = State()

@dp.message_handler(commands='start')
async def start_handler(message: types.Message):
    await message.answer("üåë –ü—Ä–∏–≤—ñ—Ç —É Darkwave.")
("–ì–æ—Ç–æ–≤–∏–π –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É? –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.")
    await Form.name.set()

@dp.message_handler(state=Form.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await Form.next()
    await message.answer("–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")

@dp.message_handler(state=Form.age)
async def get_age(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    await Form.next()
    await message.answer("–ó–≤—ñ–¥–∫–∏ —Ç–∏?")

@dp.message_handler(state=Form.city)
async def get_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await Form.next()
    await message.answer("–Ø–∫–∞ —Ç–≤–æ—è –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è? (–ì–µ—Ç–µ—Ä–æ / –ë—ñ / –Ü–Ω—à–µ)")

@dp.message_handler(state=Form.orientation)
async def get_orientation(message: types.Message, state: FSMContext):
    await state.update_data(orientation=message.text)
    await Form.next()
    await message.answer("–ö–æ–≥–æ —à—É–∫–∞—î—à?")

@dp.message_handler(state=Form.looking_for)
async def get_looking_for(message: types.Message, state: FSMContext):
    await state.update_data(looking_for=message.text)
    await Form.next()
    await message.answer("–û–ø–∏—à–∏ —Å–≤—ñ–π –≤–∞–π–±, —Å—Ç–∏–ª—å –∞–±–æ –º—É–∑–∏–∫—É —è–∫—É —Å–ª—É—Ö–∞—î—à:")

@dp.message_handler(state=Form.vibe)
async def get_vibe(message: types.Message, state: FSMContext):
    await state.update_data(vibe=message.text)
    await Form.next()
    await message.answer("–Ø–∫–∏–π —Ç–≤—ñ–π –∑—Ä—ñ—Å—Ç?")

@dp.message_handler(state=Form.height)
async def get_height(message: types.Message, state: FSMContext):
    await state.update_data(height=message.text)
    await Form.next()
    await message.answer("–í–∫–∞–∂–∏ —Å–≤—ñ–π Telegram @–Ω—ñ–∫:")

@dp.message_handler(state=Form.contact)
async def get_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    await Form.next()
    await message.answer("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ (–æ–¥–Ω–µ):")

@dp.message_handler(content_types=types.ContentType.PHOTO, state=Form.photo)
async def get_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    caption = f"""
üñ§ –Ü–º‚Äô—è: {data['name']}
üìç –ú—ñ—Å—Ç–æ: {data['city']}
üéß –í–∞–π–±: {data['vibe']}
üí¨ –®—É–∫–∞—î: {data['looking_for']}
üìè –ó—Ä—ñ—Å—Ç: {data['height']}
üîó Telegram: {data['contact']}
"""
    await bot.send_photo(chat_id=CHANNEL_ID, photo=message.photo[-1].file_id, caption=caption)
    await message.answer("‚úÖ –¢–≤–æ—é –∞–Ω–∫–µ—Ç—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–æ –∫–∞–Ω–∞–ª—É. –î—è–∫—É—î–º–æ!")
    await state.finish()
